//
//  ChooseFrameViewController.swift
//  InsangNeCut
//
//  Created by Hamlit Jason on 2022/11/27.
//

import UIKit
import RxSwift
import RxCocoa
import ReactorKit
import RxGesture
import RxDataSources

final class ChooseFrameViewController: UIViewController, View {
    typealias Reactor = ChooseFrameReactor
    
    enum Reusable {
        static let headerView = ReusableView<ChooseFrmaeHeaderView>()
        static let chooseFrame = ReusableCell<ChooseFrameCell>()
    }
    
    // MARK: - Properties
    var disposeBag = DisposeBag()
    
    lazy var dataSource = UICollectionViewDiffableDataSource<ChooseFrameModel.Category, ChooseFrameReactor.Item>(
        collectionView: collectionView) {
            collectionView, indexPath, itemIdentifier in
            
            let section = ChooseFrameModel.Category(rawValue: indexPath.section)
            
            // NOTE: - Ï∂îÌõÑÏóê Î™®Îç∏ÏùÑ Ïó¨Îü¨Í∞úÎèÑ Îã§Î≥ÄÌôî Í∞ÄÎä•Ìï¥ÏÑú Ïö∞ÏÑ† ÌïôÏû•ÏÑ± Í≥†Î†§Ìï¥ ÏÑ§Í≥ÑÌï¥ÎëêÍ∏∞
            var value: ChooseFrameModel
            switch itemIdentifier {
            case .basicFrame1x1(let item): value = item
            case .basicFrame4x1(let item): value = item
            case .basicFrame4x1Emoji(let item): value = item
            case .basicFrame4x1Mongle(let item): value = item
            }
            
            switch section {
            default:
                let cell = collectionView.dequeue(Reusable.chooseFrame, for: indexPath)
                cell.configureCell(for: value)
                
                cell.frameImageView.rx.gesture(.tap())
                    .when(.recognized)
                    .map { _ in
                        Reactor.Action.didTapCellGesture(cell.model!)
                    }
                    .bind(to: self.reactor!.action)
                    .disposed(by: self.disposeBag)
                
                return cell
            }
        }
    // MARK: - Binding
    func bind(reactor: Reactor) {
        dispatch(reactor: reactor)
        render(reactor: reactor)
    }
    
    private func dispatch(reactor: Reactor) {
        disposeBag.insert {
            self.rx.viewDidLoad
                .map { _ in Reactor.Action.viewDidLoad }
                .bind(to: reactor.action)
            
            self.rx.viewWillAppear
                .map { _ in Reactor.Action.viewWillAppear }
                .bind(to: reactor.action)
            
            xmarkCircleBarButtonItem.rx.tap
                .map { _ in Reactor.Action.didTapÎÇòÍ∞ÄÍ∏∞Î≤ÑÌäºÎ∑∞ }
                .bind(to: reactor.action)
            
            Í≥†Î•¥Í∏∞ÏôÑÎ£åÎ≤ÑÌäº.rx.tap
                .map { _ in Reactor.Action.Í≥†Î•¥Í∏∞ÏôÑÎ£åÎ≤ÑÌäº }
                .bind(to: reactor.action)
        }
    }
    
    private func render(reactor: Reactor) {
        
        disposeBag.insert {
            reactor.state.map { $0.nextViewType }
                .withUnretained(self)
                .bind { this, type in
                    switch type {
                    case .Ïπ¥Î©îÎùº: this.xmarkCircleBarButtonItem.tintColor = .designSystem(.mainPurple)
                    case .Ìè¨ÌÜ†Ïª∑: this.xmarkCircleBarButtonItem.tintColor = .designSystem(.mainBlue)
                    }
                }
            
            reactor.state.map { $0.snapshot }
                .withUnretained(self)
                .bind { this, snapshot in
                    this.dataSource.apply(snapshot, animatingDifferences: false)
                    // TODO: - Ìó§ÎçîÏóê ÌååÎùºÎØ∏ÌÑ∞Î°ú Îã§Î•¥Í≤å Ï≤òÎ¶¨ÌïòÍ∏∞
                    this.heaher()
                }
            
            reactor.pulse(\.$showsNextView)
                .filter { $0 == true }
                .withUnretained(self)
                .bind { this, _ in
                    let nextViewType = reactor.initialState.nextViewType
                    this.showNextView(nextViewType: nextViewType)
                }
            
            reactor.state.map { $0.isDismiss }
                .filter { $0 == true }
                .withUnretained(self)
                .bind { this, _ in this.dismiss(animated: true) }
        }
    }
    
    // MARK: - Function
    private func showNextView( nextViewType: Reactor.State.NextViewType) {
        let frameImage = reactor?.currentState.chooseFrameModelItem
        
        switch nextViewType {
        case .Ïπ¥Î©îÎùº:
            self.showCameraViewController(frameImage: frameImage!.image, makeType: frameImage!.makeType)
        case .Ìè¨ÌÜ†Ïª∑:
            self.showPhotoCutViewController(frameImgae: frameImage!.image, makeType: frameImage!.makeType)
        }
    }
    
    // MARK: - Initialize
    init(reactor: Reactor) {
        super.init(nibName: nil, bundle: nil)
        self.reactor = reactor
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.configureUI()
    }
    
    // MARK: - UIComponents
    lazy var xmarkCircleBarButtonItem = XmarkCircleBarButtonItem(tintColor: .designSystem(.mainPurple))
    
    lazy var collectionView: UICollectionView = {
        let layout = createLayout()
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        
        cv.register(Reusable.chooseFrame)
        cv.register(Reusable.headerView, kind: .header)
        
        return cv
    }()
    
    lazy var Í≥†Î•¥Í∏∞ÏôÑÎ£åÎ≤ÑÌäº: ConfirmButton = {
        $0.normalTitle = "ÎÑ§Ïª∑ ÏÉùÏÑ±ÌïòÍ∏∞"
        $0.normalTitleColor = .white
        $0.configure()
        return $0
    }(ConfirmButton())
}

//
extension ChooseFrameViewController {
    
    func heaher() {
        // 1Ô∏è‚É£ Header Cell Îì±Î°ù
        let headerRegistration = UICollectionView.SupplementaryRegistration
        <ChooseFrmaeHeaderView>(elementKind: ChooseFrmaeHeaderView.kind) {
            (supplementaryView, string, indexPath) in
            
            let section = ChooseFrameModel.Category(rawValue: indexPath.section)
            switch section {
            case .basicFrame4x1: supplementaryView.headerLabel.text = "# Í∏∞Î≥∏ 4x1"
            case .basicFrame1x1: supplementaryView.headerLabel.text = "# Í∏∞Î≥∏ 1x1"
            case .basicFrame1x1Emoji: supplementaryView.headerLabel.text = "# Ïù¥Î™®ÏßÄ 1x1"
            case .basicFrame4x1Mongle: supplementaryView.headerLabel.text = "# Î™ΩÍ∏Ä 4x1"
            default:
                print("üö® Î¨¥Ïñ∏Í∞Ä Îπ†Îú®Î¶∞ Í≤É Í∞ôÏïÑÏöî. Íº≠ Ï≤¥ÌÅ¨Ìï¥Ï£ºÏÑ∏Ïöî.")
                supplementaryView.headerLabel.text = "ÎØ∏Î∂ÑÎ•ò"
            }
        }
        
        // 1Ô∏è‚É£ Footer Cell Îì±Î°ù
        
        dataSource.supplementaryViewProvider = { (view, kind, index) in
            
            return self.collectionView.dequeueConfiguredReusableSupplementary(
                using: kind == ChooseFrmaeHeaderView.kind
                ? headerRegistration
                : headerRegistration, // ÎÇòÏ§ëÏóê Ìë∏ÌÑ∞ ÏÇ¨Ïö©ÌïòÎ©¥ Ìë∏ÌÑ∞Î°ú ÍµêÏ≤¥
                for: index
            )
        }
        
    }
}
